---
- name: Check cgroups v2 is enabled
  shell: |
    set -o pipefail
    grep GRUB_CMDLINE_LINUX /etc/default/grub | grep -c "systemd.unified_cgroup_hierarchy=1"
  args:
    executable: /bin/bash
  changed_when: False
  register: cgroup_version_status
  failed_when: cgroup_version_status.rc > 1
  when:
    - (ansible_kernel.split('.')[0:2] | join('.')) is version('5.2', operator='gt', strict=True)
    - not ansible_virtualization_type | regex_search("docker|container")
    - ansible_env.WSLENV is not defined

- name: Enable cgroups v2
  lineinfile:
    dest: "~/test.conf"
    regexp: 'GRUB_CMDLINE_LINUX="(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 systemd.unified_cgroup_hierarchy=1"'
    backrefs: yes
  when: cgroup_version_status.stdout is defined and cgroup_version_status.stdout | int == 0
  notify:
    - Update grub bootloader

- name: Enable rootless kernel settings
  template:
    src: "sysctl.d/00-rootless.conf.j2"
    dest: "/etc/sysctl.d/00-rootless.conf"
    mode: "0644"
  when: docker_rootless_install | bool
  notify:
    - Reload sysctl

- name: Flush handlers
  meta: flush_handlers

- name: Remove legacy docker packages
  action: >
    {{ ansible_pkg_mgr }} name={{ docker_legacy_packages }} state=absent
  register: pkg_removal_requirements
  until: pkg_removal_requirements is succeeded
  retries: 3
  changed_when: false

- name: Delete docker folders if exists
  file:
    state: absent
    path: "{{ item }}"
  changed_when: false
  with_items:
    - "/var/lib/docker"
    - "/var/lib/containerd"

- name: CentOS - required packages
  set_fact:
    required_system_packages: |
      {% if ansible_distribution == 'CentOS' and ansible_distribution_major_version | int <= 7 %}
      {{ _required_system_packages['default'] + _required_system_packages[ansible_distribution].7 }}
      {% else %}
      {{ _required_system_packages['default'] + _required_system_packages[ansible_distribution].8 }}
      {% endif %}
  when: ansible_distribution == 'CentOS'

- name: All distros - required packages
  set_fact:
    required_system_packages: "{{  _required_system_packages['default'] + _required_system_packages[ansible_distribution] }}"
  when:
    - ansible_os_family == 'Debian' or ansible_distribution == 'Fedora'

- name: Skip libfuse3-dev packages for ubuntu bionic
  set_fact:
    required_system_packages: "{{ required_system_packages | difference('libfuse3-dev') }}"
  when: ansible_distribution_release is regex('bionic|xenial')

- name: Install required packages
  action: >
    {{ ansible_pkg_mgr }} name={{ required_system_packages }} state=present update_cache=yes
  register: system_pkg_requirements
  until: system_pkg_requirements is succeeded
  retries: 3
#  become: true

- name: Set iptables_t domain to permissive
  selinux_permissive:
    name: iptables_t
    permissive: true
  when:
    - ansible_distribution == 'CentOS' and ansible_distribution_major_version | int >= 7
    - ansible_distribution == 'Fedora'

- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present
    params: "permit_mounts_in_userns=1"
  when: ansible_distribution == 'Debian'and not ansible_virtualization_type | regex_search("docker|container")
